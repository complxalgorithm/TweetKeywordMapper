#!/bin/sh
# Name: tkm (tweetkeywordmapper)
# Author: Stephen C. Sanders <https://stephensanders.me>
# Description: wrapper for running tweetkeywordmapper python package

# display help information for program
helpFunc()
{
    echo "usage: ./tkm [search] [read] [counts] [create] [help]\n"
    echo "Search/Import Tweet data from US states with a keyword, then map the count results."
    echo "- search and read will run mapper.py to map the results after state counts are totaled."
    echo "- if you want to use two parameters, create must be one of them.\n"
    echo "optional parameters:"
    echo "search:\t search Twitter for Tweets containing a specific keyword, then map results"
    echo "read:\t import Tweet data from a CSV/XLSX file, then map results"
    echo "counts:\t tally the count for each unique value of a specified field from a CSV/XLSX file"
    echo "create:\t create a CSV or XLSX file to use for writing and importing Tweet data"
    echo "help:\t display usage information"
    exit 1
}

# handle parameter

# lack of parameter triggers the displaying of an error and the help info
if [ $# -eq "0" ]; then
    echo "ERROR - No parameter provided.\n"
    helpFunc
    
    # run this if parameter is present
    else
        # display error and show help info if more than one parameter is specified
        if [ $# -gt "2" ]; then
            echo "ERROR - Too many parameters. Only 2 is allowed at most.\n"
            helpFunc
            
            # show usage information if help is a parameter
            elif [[ $1 = "help" || $2 = "help" ]]; then
                helpFunc
            
            # display error and show usage info if create file is not a parameter 
            elif [ $# -eq "2" ] && [[ $1 != "create" && $2 != "create" ]]; then
                echo "ERROR - create must be used when using 2 arguments.\n"
                helpFunc
                
            # run this in any other situation
            else
                # go through each argument that was passed
                for i in "$@"; do
                    # if any of the arguments are not valid, display an error and usage information
                    if [[ $i != "search" && $i != "read" && $i != "counts" && $i != "create" ]]; then
                        echo "ERROR - $i is an invalid function.\n"
                        helpFunc
                    fi
                done
                
                # when there is 1 parameter
                if [ $# -eq "1" ]; then
                    # run search.py when parameter is set to "search"
                    if [ $1 = "search" ]; then
                        exec python3 tweetkeywordmapper -s
                    
                        # run read.py program when parameter is set to "read"
                        elif [ $1 = "read" ]; then
                            exec python3 tweetkeywordmapper -r
                
                        # run counts.py program when parameter is set to "counts"
                        elif [ $1 = "counts" ]; then
                            exec python3 tweetkeywordmapper -c
                    
                        # run create_file() when parameter is set to "create"
                        elif [ $1 = "create" ]; then
                            exec python3 tweetkeywordmapper -f
                        
                        # display usage information
                        else
                            helpFunc
                    fi
                    
                    # when there are 2 parameters
                    else
                        # there are 2 parameters, and since no errors were returned,
                        # it can be assumed that "create" is one of the parameters
                        # run it along with whatever functionality the second parameter is
                        # attached to
                        
                        # run search.py program when parameter is set to "search"
                        if [[ $1 = "search" || $2 = "search" ]]; then
                            exec python3 tweetkeywordmapper -s -f

                            # run read.py program when parameter is set to "read"
                            elif [[ $1 = "read" || $2 = "read" ]]; then
                                exec python3 tweetkeywordmapper -r -f

                            # run counts.py program when parameter is set to "counts"
                            elif [[ $1 = "counts" || $2 = "counts" ]]; then
                                exec python3 tweetkeywordmapper -c -f

                            # display usage information
                            else
                                helpFunc
                        fi
                fi
                
        fi
fi